package ru.avalon.java.dev.j10.labs.sort;

import ru.avalon.java.dev.j10.labs.Sort;

/**
 * Сортировка выбором (англ. selection sort).
 *
 * <p>
 * Алгоритм сортировки. Может быть как устойчивый, так и неустойчивый. На
 * массиве из n элементов имеет время выполнения в худшем, среднем и лучшем
 * случае Θ(n2), предполагая что сравнения делаются за постоянное время.
 *
 * 1. Берем первый элемент последовательности;<n>
 * 2. Находим минимальный (максимальный) элемент последовательности и запоминаем
 * его номер в переменную key; <n>
 * 3. Если номер первого элемента и номер найденного элемента не совпадают, т.е.
 * если key≠1, тогда два этих элемента обмениваются значениями, иначе никаких
 * манипуляций не происходит;<n>
 * 4. Увеличиваем i на 1 и продолжаем сортировку оставшейся части массива, а
 * именно с элемента с номером 2 по N, так как элемент A[1] уже занимает свою
 * позицию;
 *
 * @see
 * <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D0%B2%D1%8B%D0%B1%D0%BE%D1%80%D0%BE%D0%BC">Сортировка
 * выбором</a>
 */
public class SelectionSort implements Sort {
// меняем элементы местами только после проверки всего массива и нахождения наименьшего (наибольшего) значения
    public void sort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) { // в качестве сравниваемого элемента берем i
            int key = i; // переменная для хранения значения j и дальнейшего использования
            for (int j = i + 1; j < array.length; j++) { // дальше сравниваем выбранный i с другими элементами (j)
                if (array[j] < array[key]) { // если какой то элемент j меньше, чем key (исходно i), то
                    key = j; // запоминаем его позицию и  так далее сравниваем далнейшие элементы уже с найденным меньшим key. Нашли - перезаписываем в key номер позиции этого j
                }
            }
            if (key != i) { // если наименьший из всех в сравнении с i элемент найден, то меняем их значения местами
                int temp = array[i];
                array[i] = array[key];
                array[key] = temp;
            }
        }
    }
}
